(include "./time.yuck")
;; Xmonad
(deflisten ws_info :initial "{ \"0\": \"current active\" }"
    `xprop -spy -root _XMONAD_LOG | stdbuf -o0 sed 's/_XMONAD_LOG(UTF8_STRING) = "\\(.*\\), "/{ \\1 }/' | stdbuf -o0 sed 's/\\\\//g'`
)

(deflisten ws_max :initial 0
    `xprop -spy -root _XMONAD_LOG | stdbuf -o0 sed 's/.*\\([0-9]\\).*/\\1/'`
)

(defwidget ws [id]
    (eventbox
        :onclick `wmctrl -s ${id - 1}`
        (box :width 14
            :class `ws-sq ${ws_info[id]} ${id < ws_max ? "visible" : "invisible"}`
						(label :text `[ ${id} ]`)
        )
    )
)
(defwidget wg_ws []
    (box
        :halign "start"
        :spacing 8
        (ws :id 1)
        (ws :id 2)
        (ws :id 3)
        (ws :id 4)
    )
)

(defpoll vol :interval "500ms"
	"wpctl get-volume @DEFAULT_SINK@"
)

(defwidget separator []
  (label :text "|" :class "separator")
)

(defwidget volume []
  (eventbox :onscroll "bash scripts/changevol {}"
            :onclick "wpctl set-mute @DEFAULT_SINK@ toggle"
						:timeout "200ms"
    	"VOL: ${search(vol, '..$')[0]}"
  )
)


(defwidget disk []
	(label :text "DISK: ${round((EWW_DISK["/"].free / 1000000000), 0)} GB")
)

(defwidget cpu []
  (label :text "CPU: ${round(EWW_CPU.avg, 0)} %")
)

(defwidget memory []
 (label :text "MEM: ${round((EWW_RAM.used_mem / 1000000000), 2)} GB" 
				:truncated true
				:show-truncated false)
)


(defwidget sidestuff []
		(box
			 :class "sidestuff"
			 :orientation "h"
			 :space-evenly false
			 :halign "end"
		 (cpu)
		 (separator)
		 (disk)
		 (separator)
		 (memory)
		 (separator)
		 (volume)
		 (separator)
		 (clock)
		 (systray
			:class "tray"
		  :prepend-new true
      :icon-size 20
      :space-evenly false
      :spacing 2)
))

(defwidget space []
	(box :orientation "h"
			 :class "space"
			 :label ""))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwindow topbar 
		:class "topbar"
		:monitor "DVI-I-1"
		:geometry (geometry :x "0%"
												:y "0%"
												:width "100%"
												:height "20px"
												:anchor "top center")
		:stacking "fg"
		:reserve (struts :distance "28px" :side "top")
    :windowtype "dock"
    :wm-ignore false
(centerbox 
(wg_ws)
(space)
(sidestuff))
)

